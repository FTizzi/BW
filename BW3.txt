CODICE CON ERRORE

#include <stdio.h>

int main () {

int vector [10], i, j, k;
int swap_var;


printf ("Inserire 10 interi:\n");

for ( i = 0 ; i < 11 ; i++) 
//Modificando "<10" con "<11" causerà errore di segmentazione poiché il programma cercherà di scrivere oltre i limiti dell'array vector.
	{
	int c= i+1;
	printf("[%d]:", c);
	scanf ("%d", &vector[i]);
	}


printf ("Il vettore inserito e':\n");
for ( i = 0 ; i < 10 ; i++)
        {
        int t= i+1;
        printf("[%d]: %d", t, vector[i]);
	printf("\n");
	}


for (j = 0 ; j < 10 - 1; j++)
	{
	for (k = 0 ; k < 10 - j - 1; k++)
		{
			if (vector[k] > vector[k+1])
			{
			swap_var=vector[k];
			vector[k]=vector[k+1];
			vector[k+1]=swap_var;
			}
		}
	}
printf("Il vettore ordinato e':\n");
for (j = 0; j < 10; j++)
	{
	int g = j+1;
	printf("[%d]:", g);
	printf("%d\n", vector[j]);
	}

return 0;


}



CODICE FUNZIONANTE

#include <stdio.h>

int main() {
    int vector[10], i, scanf_result;

    printf("Inserire 10 interi:\n");

    for (i = 0; i < 10; i++) {
        printf("[%d]: ", i + 1);
        scanf_result = scanf("%d", &vector[i]);

        // Controlla se l'input è un intero valido
        if (scanf_result != 1) {
            printf("Input non valido. Inserire un intero valido.\n");

            // Pulizia del buffer di input in caso di errore
            while (getchar() != '\n');
            
            i--; // Ripetere l'iterazione per l'input corretto
        }

        // Termina il ciclo se abbiamo letto 10 interi validi
        if (i == 9) {
            break;
        }
    }

    printf("Il vettore ordinato e':\n");
    for (int j = 0; j < 10; j++) {
        printf("%d ", vector[j]); // Stampa ogni elemento con uno spazio di separazione
    }
    printf("\n");

    return 0;
}
